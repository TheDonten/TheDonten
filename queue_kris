#include<iostream>
#include <vector>
#include <sstream>
#include <string>
#include <utility>
#include <fstream>

class Queue {
private:
	std::vector<std::string> _queue;
	size_t tail = 0;
	size_t head = 0;
	size_t point = 0;
	bool flag = true;
public:
	Queue() {

	}

	void set_size(long long n, std::ofstream& out_put) {
		if (!flag || n < 1)
			out_put << "error\n";
		else {
			flag = false;
			_queue.resize(n);
			for (auto& x : _queue) {
				x = " ";
			}
		}
	}

	void push(std::string str, std::ofstream& out_put) {
		if (!flag) {
			if (point == 0) {
				_queue[_queue.size() - 1] = str;
				head = _queue.size() - 1;
				tail = head - 1;
				point += 1;
			}
			else if (point  < _queue.size()) {
				if (tail == 0) {
					_queue[tail] = str;
					tail = _queue.size() - 1;
					point += 1;
				}
				else {
					_queue[tail] = str;
					tail -= 1;
					point += 1;
				}
			}
			else {
				out_put << "overflow" << std::endl;
				return;
			}
		}
		else out_put << "error" << std::endl;
	}

	void pop(std::ofstream& out_put) {
		if (!flag) {
			if (point == 0) {
				out_put << "underflow" << std::endl;
				return;
			}
			out_put << _queue[head] << std::endl;

			if (head == 0) {
				_queue[head] = " ";
				point -= 1;
				head = _queue.size() - 1;
			}
			else {
				_queue[head] = " ";
				point -= 1;
				head -= 1;
			}
		}
		else out_put << "error\n";
	}

	void print(std::ofstream& out_put) {
		if (point == 0 && _queue.size() > 0) {
			out_put << "empty" << std::endl;
			return;
		}
		else if (_queue.size() == 0) {
			out_put << "error" << std::endl;
			return;
		}
		int m = 0;
		for (int i = head; i >= 0; --i) {
			if (!(m < point)) break;
			if (_queue[i] != " ") {
				out_put << _queue[i];
				if (m != point - 1)out_put << " ";
				m += 1;
			}
		}
		for (int i = _queue.size() - 1; i >= 0; --i) {
			if (!(m < point)) break;
			if (_queue[i] != " ") {
				out_put << _queue[i];
				if (m != point - 1) out_put << " ";
				m += 1;
			}
		}
		out_put << std::endl;
	}
	
	~Queue() {

	}
};


int main(int argc, char* argv[])
{

	Queue A;
	std::string in = argv[1];
	std::string out = argv[2];
	std::ifstream in_put(in);
	std::ofstream out_put(out);
	std::string main_str, str_com, str_num = "",str_check;
	char op;
	bool flag = false;
	bool flag_size = true;
	
	while (std::getline(in_put, main_str)) {
		main_str += "\n";
		std::istringstream stream(main_str);
		while (stream >> str_com) {
			if (str_com == "set_size" && stream.peek() != '\n' && flag_size) {
				if (stream >> str_com && stream.peek() == '\n') {

					for (int i = 0; i < str_com.size(); ++i) {
						if (!std::isdigit(str_com[i])) {
							str_num.clear();
							break;
						}
						else str_num.push_back(str_com[i]);
					}

					if (!str_num.empty()) {
						flag_size = false;
						A.set_size(std::stoll(str_num.c_str()), out_put);
						str_num.clear();
					}
					else {
						out_put << "error\n";
						str_num.clear();
					}

				}
				else {
					out_put << "error\n";
					break;
				}
			}

			else if (str_com == "pop" && stream.peek() == '\n') {
				A.pop(out_put);
				break;
			}

			else if (str_com == "push" && stream.peek() != '\n') {
				if (stream >> str_num && stream.peek() == '\n') {
					A.push(str_num, out_put);
					break;
				}
				else {
					out_put << "error\n";
					break;
				}
			}

			else if (str_com == "print" && stream.peek() == '\n') {
				A.print(out_put);
				break;
			}

			else {
				out_put << "error\n";
				break;
			}

		}
	}
	in_put.close();
	out_put.close();
}
