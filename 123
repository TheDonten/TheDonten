#include <iostream>
#include <sstream>
#include <string>
#include <valarray>
#include <fstream>
using namespace std;
class tree_t {
 private:
  struct node_t {
    node_t* left;
    node_t* right;
    int value;
  
    node_t(){
        left= nullptr;
        right = nullptr;
        value = 0;
    }
    ~node_t(){}
  };

 private:
  node_t* root_;

 public:
  tree_t() { root_ = nullptr; }

  node_t* root() { return root_; }

  void insert(int value) {
    node_t* node = new node_t;
    node->value = value;
    node->right = nullptr;
    node->left = nullptr;
    if (root_ == nullptr) {
      root_ = node;
      return;
    }

    node_t* vetka = root_;
    while (vetka != nullptr) {
      if (vetka->value < value) {
        if (vetka->right != nullptr) {
          vetka = vetka->right;
        } else {
          vetka->right = node;
          return;
        }
      } else if (vetka->value > value) {
        if (vetka->left != nullptr) {
          vetka = vetka->left;
        } else {
          vetka->left = node;
          return;
        }
      } else
        return;
    }
  }
  bool find(int value) const{
      node_t * node = root_;
      while(node != nullptr){
          if(node -> value == value){
              return true;
          }
          else {
              if( value <= node->value){
                  node = node->left;
              }
              else node = node->right;
          }
      }
      return false;
  }

  void print(std::ostream& stream, int level, node_t* node) {
    if (node == nullptr)
      return;

    print(stream, level + 1, node->right);

    for (unsigned int i = 0; i < level; i++) {
      stream << "---";
    }
    stream << node->value<<endl;

    print(stream, level + 1, node->left);
  }
  void destroy(node_t * node){
      node_t * time= node;
       cout<<"skolko raz delete";
      while(time != nullptr){
          if(time->left != nullptr){
              time= time->left;
          }
          else if(time->right != nullptr){
              time = time->right;
          }
          else if(time == node && node->left == nullptr && node->right == nullptr){
           
              delete [] time;
              break;
          }
          else if(time->left == nullptr && time->right == nullptr){
              delete [] time;
              time = node;
            }
         
      }
  }
  ~tree_t() {
      cout<<"Raz";
      destroy(root_);
      cout<<"Dva";
  }

};
int main() {
  string string;
  int value;
  char op;
  /* getline(cin, string);
   istringstream stream(string);
   stream>> value;*/

  tree_t tree1;
  /*cin>>value;
  tree1.insert(value);

  cin>>value;
  tree1.insert(value);
  cin>>value;
  tree1.insert(value);
  cout<<endl;
  cout<<endl;

  tree1.print(cout);*/
  for(unsigned int i=0; i<4; i++){
      cin>>value;
      tree1.insert(value);
  }
  //  cin>>value;
  //  tree1.insert(value);
  if(tree1.find(4) == true) {cout<<"pidar";}
  tree1.print(cout, 0, tree1.root());
   
  return 0;
}
